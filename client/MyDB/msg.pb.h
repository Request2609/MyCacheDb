// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace Messages {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class ListObject;
class ListObjectDefaultTypeInternal;
extern ListObjectDefaultTypeInternal _ListObject_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> ::Messages::Command* Arena::CreateMaybeMessage<::Messages::Command>(Arena*);
template<> ::Messages::Key* Arena::CreateMaybeMessage<::Messages::Key>(Arena*);
template<> ::Messages::ListObject* Arena::CreateMaybeMessage<::Messages::ListObject>(Arena*);
template<> ::Messages::Response* Arena::CreateMaybeMessage<::Messages::Response>(Arena*);
template<> ::Messages::Time* Arena::CreateMaybeMessage<::Messages::Time>(Arena*);
template<> ::Messages::Value* Arena::CreateMaybeMessage<::Messages::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Messages {

// ===================================================================

class Value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // repeated string val = 1;
  int val_size() const;
  void clear_val();
  const std::string& val(int index) const;
  std::string* mutable_val(int index);
  void set_val(int index, const std::string& value);
  void set_val(int index, std::string&& value);
  void set_val(int index, const char* value);
  void set_val(int index, const char* value, size_t size);
  std::string* add_val();
  void add_val(const std::string& value);
  void add_val(std::string&& value);
  void add_val(const char* value);
  void add_val(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_val();
  private:
  std::string* _internal_add_val();
  public:

  // @@protoc_insertion_point(class_scope:Messages.Value)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> val_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // repeated string key = 1;
  int key_size() const;
  void clear_key();
  const std::string& key(int index) const;
  std::string* mutable_key(int index);
  void set_key(int index, const std::string& value);
  void set_key(int index, std::string&& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  std::string* add_key();
  void add_key(const std::string& value);
  void add_key(std::string&& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key();
  private:
  std::string* _internal_add_key();
  public:

  // @@protoc_insertion_point(class_scope:Messages.Key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Time :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(nullptr);
  }

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Time";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:Messages.Time)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double time_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ListObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.ListObject) */ {
 public:
  ListObject();
  virtual ~ListObject();

  ListObject(const ListObject& from);
  ListObject(ListObject&& from) noexcept
    : ListObject() {
    *this = ::std::move(from);
  }

  inline ListObject& operator=(const ListObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListObject& operator=(ListObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListObject* internal_default_instance() {
    return reinterpret_cast<const ListObject*>(
               &_ListObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListObject& a, ListObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ListObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListObject* New() const final {
    return CreateMaybeMessage<ListObject>(nullptr);
  }

  ListObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListObject& from);
  void MergeFrom(const ListObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.ListObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .Messages.Value vals = 2;
  int vals_size() const;
  void clear_vals();
  ::Messages::Value* mutable_vals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >*
      mutable_vals();
  const ::Messages::Value& vals(int index) const;
  ::Messages::Value* add_vals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >&
      vals() const;

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:Messages.ListObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value > vals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 4,
    kValsFieldNumber = 5,
    kLobFieldNumber = 9,
    kCmdFieldNumber = 2,
    kSeqFieldNumber = 10,
    kStatusFieldNumber = 1,
    kLenFieldNumber = 3,
    kTypeFieldNumber = 6,
    kNumFieldNumber = 7,
    kTimeFieldNumber = 8,
  };
  // repeated .Messages.Key keys = 4;
  int keys_size() const;
  void clear_keys();
  ::Messages::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Key >*
      mutable_keys();
  const ::Messages::Key& keys(int index) const;
  ::Messages::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Key >&
      keys() const;

  // repeated .Messages.Value vals = 5;
  int vals_size() const;
  void clear_vals();
  ::Messages::Value* mutable_vals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >*
      mutable_vals();
  const ::Messages::Value& vals(int index) const;
  ::Messages::Value* add_vals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >&
      vals() const;

  // repeated .Messages.ListObject lob = 9;
  int lob_size() const;
  void clear_lob();
  ::Messages::ListObject* mutable_lob(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::ListObject >*
      mutable_lob();
  const ::Messages::ListObject& lob(int index) const;
  ::Messages::ListObject* add_lob();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::ListObject >&
      lob() const;

  // required string cmd = 2;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // required string seq = 10;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  const std::string& seq() const;
  void set_seq(const std::string& value);
  void set_seq(std::string&& value);
  void set_seq(const char* value);
  void set_seq(const char* value, size_t size);
  std::string* mutable_seq();
  std::string* release_seq();
  void set_allocated_seq(std::string* seq);
  private:
  const std::string& _internal_seq() const;
  void _internal_set_seq(const std::string& value);
  std::string* _internal_mutable_seq();
  public:

  // optional int32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 len = 3;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  bool type() const;
  void set_type(bool value);

  // optional int32 num = 7;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double time = 8;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:Messages.Command)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Key > keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value > vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::ListObject > lob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  bool type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  double time_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // required string reply = 1;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // required string seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  const std::string& seq() const;
  void set_seq(const std::string& value);
  void set_seq(std::string&& value);
  void set_seq(const char* value);
  void set_seq(const char* value, size_t size);
  std::string* mutable_seq();
  std::string* release_seq();
  void set_allocated_seq(std::string* seq);
  private:
  const std::string& _internal_seq() const;
  void _internal_set_seq(const std::string& value);
  std::string* _internal_mutable_seq();
  public:

  // @@protoc_insertion_point(class_scope:Messages.Response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seq_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// repeated string val = 1;
inline int Value::val_size() const {
  return val_.size();
}
inline void Value::clear_val() {
  val_.Clear();
}
inline std::string* Value::add_val() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Value.val)
  return _internal_add_val();
}
inline const std::string& Value::val(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Value.val)
  return val_.Get(index);
}
inline std::string* Value::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Value.val)
  return val_.Mutable(index);
}
inline void Value::set_val(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Value.val)
  val_.Mutable(index)->assign(value);
}
inline void Value::set_val(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Value.val)
  val_.Mutable(index)->assign(std::move(value));
}
inline void Value::set_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Value.val)
}
inline void Value::set_val(int index, const char* value, size_t size) {
  val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Value.val)
}
inline std::string* Value::_internal_add_val() {
  return val_.Add();
}
inline void Value::add_val(const std::string& value) {
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Value.val)
}
inline void Value::add_val(std::string&& value) {
  val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Value.val)
}
inline void Value::add_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Value.val)
}
inline void Value::add_val(const char* value, size_t size) {
  val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Value.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Value::val() const {
  // @@protoc_insertion_point(field_list:Messages.Value.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Value::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Value.val)
  return &val_;
}

// -------------------------------------------------------------------

// Key

// repeated string key = 1;
inline int Key::key_size() const {
  return key_.size();
}
inline void Key::clear_key() {
  key_.Clear();
}
inline std::string* Key::add_key() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Key.key)
  return _internal_add_key();
}
inline const std::string& Key::key(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Key.key)
  return key_.Get(index);
}
inline std::string* Key::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Key.key)
  return key_.Mutable(index);
}
inline void Key::set_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Key.key)
  key_.Mutable(index)->assign(value);
}
inline void Key::set_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Key.key)
  key_.Mutable(index)->assign(std::move(value));
}
inline void Key::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Key.key)
}
inline void Key::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Key.key)
}
inline std::string* Key::_internal_add_key() {
  return key_.Add();
}
inline void Key::add_key(const std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Key.key)
}
inline void Key::add_key(std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Key.key)
}
inline void Key::add_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Key.key)
}
inline void Key::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Key.key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Key::key() const {
  // @@protoc_insertion_point(field_list:Messages.Key.key)
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Key::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Key.key)
  return &key_;
}

// -------------------------------------------------------------------

// Time

// optional double time = 1;
inline bool Time::_internal_has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool Time::has_time() const {
  return _internal_has_time();
}
inline void Time::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Time::time() const {
  // @@protoc_insertion_point(field_get:Messages.Time.time)
  return time_;
}
inline void Time::set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
  // @@protoc_insertion_point(field_set:Messages.Time.time)
}

// -------------------------------------------------------------------

// ListObject

// optional string key = 1;
inline bool ListObject::_internal_has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool ListObject::has_key() const {
  return _internal_has_key();
}
inline void ListObject::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListObject::key() const {
  // @@protoc_insertion_point(field_get:Messages.ListObject.key)
  return _internal_key();
}
inline void ListObject::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Messages.ListObject.key)
}
inline std::string* ListObject::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Messages.ListObject.key)
  return _internal_mutable_key();
}
inline const std::string& ListObject::_internal_key() const {
  return key_.GetNoArena();
}
inline void ListObject::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListObject::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.ListObject.key)
}
inline void ListObject::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.ListObject.key)
}
inline void ListObject::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.ListObject.key)
}
inline std::string* ListObject::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListObject::release_key() {
  // @@protoc_insertion_point(field_release:Messages.ListObject.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListObject::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Messages.ListObject.key)
}

// repeated .Messages.Value vals = 2;
inline int ListObject::vals_size() const {
  return vals_.size();
}
inline void ListObject::clear_vals() {
  vals_.Clear();
}
inline ::Messages::Value* ListObject::mutable_vals(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.ListObject.vals)
  return vals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >*
ListObject::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:Messages.ListObject.vals)
  return &vals_;
}
inline const ::Messages::Value& ListObject::vals(int index) const {
  // @@protoc_insertion_point(field_get:Messages.ListObject.vals)
  return vals_.Get(index);
}
inline ::Messages::Value* ListObject::add_vals() {
  // @@protoc_insertion_point(field_add:Messages.ListObject.vals)
  return vals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >&
ListObject::vals() const {
  // @@protoc_insertion_point(field_list:Messages.ListObject.vals)
  return vals_;
}

// -------------------------------------------------------------------

// Command

// optional int32 status = 1;
inline bool Command::_internal_has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline bool Command::has_status() const {
  return _internal_has_status();
}
inline void Command::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::status() const {
  // @@protoc_insertion_point(field_get:Messages.Command.status)
  return status_;
}
inline void Command::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.status)
}

// required string cmd = 2;
inline bool Command::_internal_has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool Command::has_cmd() const {
  return _internal_has_cmd();
}
inline void Command::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Command::cmd() const {
  // @@protoc_insertion_point(field_get:Messages.Command.cmd)
  return _internal_cmd();
}
inline void Command::set_cmd(const std::string& value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:Messages.Command.cmd)
}
inline std::string* Command::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:Messages.Command.cmd)
  return _internal_mutable_cmd();
}
inline const std::string& Command::_internal_cmd() const {
  return cmd_.GetNoArena();
}
inline void Command::_internal_set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Command.cmd)
}
inline void Command::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Command.cmd)
}
inline void Command::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Command.cmd)
}
inline std::string* Command::_internal_mutable_cmd() {
  _has_bits_[0] |= 0x00000001u;
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_cmd() {
  // @@protoc_insertion_point(field_release:Messages.Command.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:Messages.Command.cmd)
}

// optional int32 len = 3;
inline bool Command::_internal_has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline bool Command::has_len() const {
  return _internal_has_len();
}
inline void Command::clear_len() {
  len_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::len() const {
  // @@protoc_insertion_point(field_get:Messages.Command.len)
  return len_;
}
inline void Command::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.len)
}

// repeated .Messages.Key keys = 4;
inline int Command::keys_size() const {
  return keys_.size();
}
inline void Command::clear_keys() {
  keys_.Clear();
}
inline ::Messages::Key* Command::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Key >*
Command::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.keys)
  return &keys_;
}
inline const ::Messages::Key& Command::keys(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.keys)
  return keys_.Get(index);
}
inline ::Messages::Key* Command::add_keys() {
  // @@protoc_insertion_point(field_add:Messages.Command.keys)
  return keys_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Key >&
Command::keys() const {
  // @@protoc_insertion_point(field_list:Messages.Command.keys)
  return keys_;
}

// repeated .Messages.Value vals = 5;
inline int Command::vals_size() const {
  return vals_.size();
}
inline void Command::clear_vals() {
  vals_.Clear();
}
inline ::Messages::Value* Command::mutable_vals(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.vals)
  return vals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >*
Command::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.vals)
  return &vals_;
}
inline const ::Messages::Value& Command::vals(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.vals)
  return vals_.Get(index);
}
inline ::Messages::Value* Command::add_vals() {
  // @@protoc_insertion_point(field_add:Messages.Command.vals)
  return vals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Value >&
Command::vals() const {
  // @@protoc_insertion_point(field_list:Messages.Command.vals)
  return vals_;
}

// optional bool type = 6;
inline bool Command::_internal_has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline bool Command::has_type() const {
  return _internal_has_type();
}
inline void Command::clear_type() {
  type_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Command::type() const {
  // @@protoc_insertion_point(field_get:Messages.Command.type)
  return type_;
}
inline void Command::set_type(bool value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.type)
}

// optional int32 num = 7;
inline bool Command::_internal_has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline bool Command::has_num() const {
  return _internal_has_num();
}
inline void Command::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::num() const {
  // @@protoc_insertion_point(field_get:Messages.Command.num)
  return num_;
}
inline void Command::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.num)
}

// optional double time = 8;
inline bool Command::_internal_has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline bool Command::has_time() const {
  return _internal_has_time();
}
inline void Command::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Command::time() const {
  // @@protoc_insertion_point(field_get:Messages.Command.time)
  return time_;
}
inline void Command::set_time(double value) {
  _has_bits_[0] |= 0x00000040u;
  time_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.time)
}

// repeated .Messages.ListObject lob = 9;
inline int Command::lob_size() const {
  return lob_.size();
}
inline void Command::clear_lob() {
  lob_.Clear();
}
inline ::Messages::ListObject* Command::mutable_lob(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.lob)
  return lob_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::ListObject >*
Command::mutable_lob() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.lob)
  return &lob_;
}
inline const ::Messages::ListObject& Command::lob(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.lob)
  return lob_.Get(index);
}
inline ::Messages::ListObject* Command::add_lob() {
  // @@protoc_insertion_point(field_add:Messages.Command.lob)
  return lob_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::ListObject >&
Command::lob() const {
  // @@protoc_insertion_point(field_list:Messages.Command.lob)
  return lob_;
}

// required string seq = 10;
inline bool Command::_internal_has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline bool Command::has_seq() const {
  return _internal_has_seq();
}
inline void Command::clear_seq() {
  seq_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Command::seq() const {
  // @@protoc_insertion_point(field_get:Messages.Command.seq)
  return _internal_seq();
}
inline void Command::set_seq(const std::string& value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Messages.Command.seq)
}
inline std::string* Command::mutable_seq() {
  // @@protoc_insertion_point(field_mutable:Messages.Command.seq)
  return _internal_mutable_seq();
}
inline const std::string& Command::_internal_seq() const {
  return seq_.GetNoArena();
}
inline void Command::_internal_set_seq(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_seq(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Command.seq)
}
inline void Command::set_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Command.seq)
}
inline void Command::set_seq(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Command.seq)
}
inline std::string* Command::_internal_mutable_seq() {
  _has_bits_[0] |= 0x00000002u;
  return seq_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_seq() {
  // @@protoc_insertion_point(field_release:Messages.Command.seq)
  if (!has_seq()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return seq_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_seq(std::string* seq) {
  if (seq != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  seq_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seq);
  // @@protoc_insertion_point(field_set_allocated:Messages.Command.seq)
}

// -------------------------------------------------------------------

// Response

// required string reply = 1;
inline bool Response::_internal_has_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline bool Response::has_reply() const {
  return _internal_has_reply();
}
inline void Response::clear_reply() {
  reply_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::reply() const {
  // @@protoc_insertion_point(field_get:Messages.Response.reply)
  return _internal_reply();
}
inline void Response::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:Messages.Response.reply)
}
inline std::string* Response::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:Messages.Response.reply)
  return _internal_mutable_reply();
}
inline const std::string& Response::_internal_reply() const {
  return reply_.GetNoArena();
}
inline void Response::_internal_set_reply(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_reply(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reply_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Response.reply)
}
inline void Response::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Response.reply)
}
inline void Response::set_reply(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Response.reply)
}
inline std::string* Response::_internal_mutable_reply() {
  _has_bits_[0] |= 0x00000001u;
  return reply_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_reply() {
  // @@protoc_insertion_point(field_release:Messages.Response.reply)
  if (!has_reply()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reply_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reply_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:Messages.Response.reply)
}

// required string seq = 2;
inline bool Response::_internal_has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline bool Response::has_seq() const {
  return _internal_has_seq();
}
inline void Response::clear_seq() {
  seq_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Response::seq() const {
  // @@protoc_insertion_point(field_get:Messages.Response.seq)
  return _internal_seq();
}
inline void Response::set_seq(const std::string& value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Messages.Response.seq)
}
inline std::string* Response::mutable_seq() {
  // @@protoc_insertion_point(field_mutable:Messages.Response.seq)
  return _internal_mutable_seq();
}
inline const std::string& Response::_internal_seq() const {
  return seq_.GetNoArena();
}
inline void Response::_internal_set_seq(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_seq(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Response.seq)
}
inline void Response::set_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Response.seq)
}
inline void Response::set_seq(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  seq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Response.seq)
}
inline std::string* Response::_internal_mutable_seq() {
  _has_bits_[0] |= 0x00000002u;
  return seq_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_seq() {
  // @@protoc_insertion_point(field_release:Messages.Response.seq)
  if (!has_seq()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return seq_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_seq(std::string* seq) {
  if (seq != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  seq_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seq);
  // @@protoc_insertion_point(field_set_allocated:Messages.Response.seq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
